import numpy as np

# arrange() ⇒ range()のNumpy版

print(np.arange(10))
print(np.arange(1, 10, 2))
"""
[0 1 2 3 4 5 6 7 8 9]
[1 3 5 7 9]
"""

# Numpy.random ⇒ random()のNumpy版

"""
seed()を使うと乱数生成が固定される
※便宜上、乱数生成が固定される場合が望ましい場合には用いられる可能性があるとのこと

np.random.seed(123)
print(np.random.random((3, 2)))

【結果】 ※下記の値が常に生成される
[[0.69646919 0.28613933]
 [0.22685145 0.55131477]
 [0.71946897 0.42310646]]
"""

## random()
print(np.random.random((3, 2)))
"""
[[0.37552848 0.00435092]
 [0.79747802 0.72250368]
 [0.33854807 0.5790266 ]]
"""
## randint()
print(np.random.randint(1, 3))  # ⇒ 1か2を出力
print(np.random.randint(1, 3, (2, 3)))
"""
[[1 1 2]
 [2 2 2]]

[[1 1 1]
 [1 2 1]]など
"""


## uniform()

# 0.0～5.0の範囲、2×3の2次元配列
# ※サイズ指定のみにした場合デフォルトの0.0～1.0未満で各要素が生成される
print(np.random.uniform(0.0, 5.0, size=(2, 3)))
print()
"""
[[4.74003493 4.16083942 0.44001136]
 [0.52866054 3.56555091 4.53320111]]
"""

# 数列の生成 ======================================================================

# zeros()・ones()
print(np.zeros(3))
print(np.ones(3))
"""
[0. 0. 0.]
[1. 1. 1.]
"""
#print(np.twos(3)) # twos()は存在しない

print(np.zeros((2, 3)))
print(np.ones((2, 3)))
print()
"""
[[0. 0. 0.]
 [0. 0. 0.]]

 [[1. 1. 1.]
 [1. 1. 1.]]
"""

# full() ⇒ 任意の要素・大きさ で行列を作る

print(np.full(3, 3.14))
print(np.full((2, 3), 3.14))
print()
"""
[3.14 3.14 3.14]

[[3.14 3.14 3.14]
 [3.14 3.14 3.14]]
"""

# eye() ⇒ 単位行列
print(np.eye(3))
print()
print(np.eye(4))
print()
print(np.eye(5))
"""
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]

[[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]

[[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]
"""

# NAN(Not a Number)
# Noneや空文字ではエラーが発生してしまう場合に代わりに使われる

print(np.array([1, 2, np.nan]))
# ⇒ [ 1.  2. nan]

# float型に分類
print(type(np.nan))
# ⇒ <class 'float'>